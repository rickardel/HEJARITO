public class CheckModuleStartAndEndDateVSAllModulesStartAndEndDates1 : ValidationAttribute
    {
        private ApplicationDbContext applicationDbContext = new ApplicationDbContext();

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            Module typedObjectInstance = (Module)validationContext.ObjectInstance; // Sätt typen för validContext.ObjectInstance till "Module"
            DateTime incommingModuleStartDate = typedObjectInstance.StartDate; // Föreslaget startdatum för modul som ska skapas
            DateTime incommingModuleEndDate = typedObjectInstance.EndDate; // Föreslaget slutdatum för modul som ska skapas
            int result = 0; // Används för att lagra resultatet av datumjämförelser
            bool success = true; // Används för att säga om en datumjämförelse var OK eller inte
            string errorMessage1 = ""; // Används för att lagra felmeddelande från datumjämförelser
            string errorMessage2 = ""; // Används för att lagra felmeddelande från datumjämförelser 
            string errorMessage3 = ""; // Används för att lagra felmeddelande från datumjämförelser
            string errorMessage = ""; // Används för att lagra ett sammantaget felmeddelande för errorMessage1 och errorMessage2

            ApplicationDbContext applicationDbContext = new ApplicationDbContext();
            Course course = applicationDbContext.Courses.FirstOrDefault(c => c.Id == typedObjectInstance.CourseId); // Den aktuella kursen

            List<Module> modules = new List<Module>(); // Skapa en tom lista för att kunna lagra alla moduler i
            foreach (var module in course.Modules) // Bygg upp en lista med alla moduler för den aktuella kursen
            {
                modules.Add(module);
            }

            // |<---------------------Course------------------->|
            // |CS                                            CE|
            // |   |<-M1->|<-M2->|<-M3->|          |<-M4->|     |
            // |...|S1  E1|S2  E2|S3  E3|..........|S4  E4|.....|
            //          X  X    X      X            X    X
            //   |<-M5->|  |<M6>|      |<-M7->|   |<--M8-->|
            //    Case 1   Case 2       Case 3      Case 4

            // I = Incomming module, C = Current module, S = StartDate, E = EndDate
            // Loopa igenom alla befintliga moduler inom den aktuella kursen och kontrollera:
            // Case 1, 2, 3 och 4: OK if (IS < CS och IE < CS) eller (IS > CE och IE > CE)
            // Om OK för ALLA moduler => Success! Annars skriv ut felmeddelande ang. felaktigt start- och/eller slutdatum!

            foreach (var module in modules)
            {
                if (success == true)
                {
                    result = DateTime.Compare(incommingModuleEndDate, module.StartDate);
                    if (result > 0 || result == 0)
                    {
                        result = DateTime.Compare(incommingModuleEndDate, module.EndDate);
                        if (result < 0 || result == 0)
                        {
                            success = false;
                            errorMessage1 = "Föreslaget slutdatum krockar med en befintlig modul i kalendern";
                        }
                    }

                    result = DateTime.Compare(incommingModuleStartDate, module.EndDate);
                    if (result < 0 || result == 0)
                    {
                        result = DateTime.Compare(incommingModuleStartDate, module.StartDate);
                        if (result > 0 || result == 0)
                        {
                            success = false;
                            errorMessage2 = "Föreslaget startdatum krockar med en befintlig modul i kalendern";
                        }
                    }

                    result = DateTime.Compare(incommingModuleStartDate, module.StartDate);
                    if (result < 0)
                    {
                        result = DateTime.Compare(incommingModuleEndDate, module.EndDate);
                        if (result > 0)
                        {
                            success = false;
                            errorMessage3 = "Föreslagna moduldatum överlappar med datumena för en befintlig modul i kalendern";
                        }
                    }
                }
            }

            if (success)
            {
                return ValidationResult.Success;
            }
            else
            {
                if (errorMessage1 != "")
                {
                    errorMessage = errorMessage1;
                    if (errorMessage2 != "")
                    {
                        errorMessage2 = "föreslaget startdatum krockar med en befintlig modul i kalendern";
                        errorMessage = errorMessage + " och " + errorMessage2;
                    }
                }
                else if (errorMessage2 != "")
                {
                    errorMessage = errorMessage2;
                }
                else if (errorMessage3 != "")
                {
                    errorMessage = errorMessage3;
                }
                return new ValidationResult(errorMessage);
            }
        }
    }

public class CheckModuleStartDateVSAllModulesEndDates : ValidationAttribute
    {
        private ApplicationDbContext applicationDbContext = new ApplicationDbContext();

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            ApplicationDbContext applicationDbContext = new ApplicationDbContext();

            Module typedObjectInstance = (Module)validationContext.ObjectInstance; // Typa validContext.ObjectInstance till "Module"
            DateTime moduleStartDate = (DateTime)value; // Föreslaget startdatum för modul som ska skapas
            DateTime moduleEndDate = typedObjectInstance.EndDate; // Föreslaget slutdatum för modul som ska skapas
            Course course = applicationDbContext.Courses.FirstOrDefault(c => c.Id == typedObjectInstance.CourseId); // Den aktuella kursen
            int result = 0; // Används för att lagra resultatet av datumjämförelser

            List<Module> modules = new List<Module>(); // Skapa en tom lista för att kunna lagra alla moduler i
            foreach (var module in course.Modules) // Bygg upp en lista med alla moduler för den aktuella kursen
            {
                modules.Add(module);
            }

            // Ordna modulerna enl. ökande startdatum i en Array för att kunna jobba med två moduler samtidigt (går ej med "foreach")
            Module[] orderedModules = modules.OrderBy(c => c.StartDate).ToArray();

            // Kolla föreslaget startdatum för den nya modulen gentemot startdatum för kursen (kommer alltid vara sant p.g.a. separat check)
            // Om OK: kolla föreslaget slutdatum för den nya modulen gentemot första befintliga moduls startdatum, om OK, success!
            // Om NOK: kolla föreslaget startdatum för den nya modulen gentemot slutdatum för alla befintliga moduler tills OK
            // |S             Course            E|
            // |...|  M1  |  M2  |  M3  |........|
            //     |S1  E1|S2  E2|S3  E3|
            //           ^      ^      ^     
            //           |      |      |

            DateTime courseStartDate = course.StartDate;
            result = DateTime.Compare(moduleStartDate, courseStartDate);
            if (result > 0 || result == 0) // Föreslaget moduleStartDate är senare än eller lika med courseStartDate (OK!),
                                           // gå vidare och kolla föreslaget moduleEndDate
            {
                result = DateTime.Compare(moduleEndDate, orderedModules[0].StartDate);
                if (result < 0) // Föreslaget moduleEndDate är tidigare än StartDate för den första befintliga modulen (OK!)
                {
                    return ValidationResult.Success;
                }
            }

            for (int index = 0; index < orderedModules.Length; index++)
            {
                result = DateTime.Compare(moduleStartDate, orderedModules[index].EndDate);
                if (result > 0) // Föreslaget moduleStartDate är senare än EndDate för den modul vi jämför med (OK!),
                                // gå vidare och kolla föreslaget moduleEndDate
                {
                    // Om det är den sista modulen i orderedModules så behövs inte föreslaget moduleEndDate kollas
                    // gentemot någon nästa moduls startdatum (det finns ju ingen sådan)
                    if (index == orderedModules.Length - 1)
                    {
                        return ValidationResult.Success;
                    }
                    // Om det inte var den sista modulen i orderedModules så behöver vi kolla föreslaget moduleEndDate
                    // gentemot nästa moduls startdatum
                    if (index < orderedModules.Length - 1)
                    {
                        result = DateTime.Compare(moduleEndDate, orderedModules[index + 1].StartDate);
                        if (result < 0) // Föreslaget moduleEndDate är tidigare än StartDate för den modulen vi jämför med (OK!)
                        {
                            return ValidationResult.Success;
                        }
                    }
                }
            }
            return new ValidationResult("Modulens startdatum får ej överlappa med föregående moduls slutdatum!");
        }
    }

    public class CheckModuleEndDateVSAllModulesStartAndEndDates : ValidationAttribute
    {
        private ApplicationDbContext applicationDbContext = new ApplicationDbContext();

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            ApplicationDbContext applicationDbContext = new ApplicationDbContext();

            Module typedObjectInstance = (Module)validationContext.ObjectInstance;
            DateTime moduleEndDate = (DateTime)value;

            Course course = applicationDbContext.Courses.FirstOrDefault(c => c.Id == typedObjectInstance.CourseId);

            List<Module> modules = new List<Module>();
            foreach (var module in course.Modules)
            {
                modules.Add(module);
            }

            //DateTime moduleEndDate = typedObjectInstance.EndDate;

            //DateTime earliestStartDate = applicationDbContext.Modules.OrderBy(s => s.StartDate).FirstOrDefault().StartDate;
            //DateTime latestEndDate = applicationDbContext.Modules.OrderByDescending(s => s.EndDate).FirstOrDefault().EndDate;

            foreach (var module in modules)
            {
                DateTime dBModuleStartDate = module.StartDate;
                int result = DateTime.Compare(dBModuleStartDate, moduleEndDate);

                if (result < 0)
                {
                    return new ValidationResult("Modulens slutdatum får ej överlappa med en annans moduls startdatum!");
                }
                //else
                //{
                //    return ValidationResult.Success;
                //}
            }
            return ValidationResult.Success;
        }
    }